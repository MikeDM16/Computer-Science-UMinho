time()
?time
?matrix
nclients = 12
ncol = 2
pos = c(33,30,1,31,0,29,0,31,2,32,30,0,31,1,29,0,31,0,32,2,30,30,31,31)
positions = matrix(data=pos, nrow=nclients, ncol = ncol)
View(positions)
View(positions)
positions = matrix(data=pos, nrow=nclients, ncol = ncol, byrow=TRUE)
positions
distancias = matrix(ncol=nclients, nrow=nclients)
distancias
for(i in c(0, nclients)){
print(i)
}
for(i in c(0:nclients)){
print(i)
}
for(i in c(1:nclients)){
print(i)
}
for(i in c(1:nclients)){
for(j in c(1:nclients)){
x1 = positions[i,1]
y1 = positions[i,2]
print(x1)
}
}
View(positions)
View(positions)
for(i in c(1:nclients)){
for(j in c(1:nclients)){
x1, y1 = positions[i,1], positions[i,2]
print(x1)
}
}
?pow
pow
?power
View(distancias)
View(distancias)
for(i in c(1:nclients)){
for(j in c(1:nclients)){
x1 = positions[i,1];
y1 = positions[i,2];
x2 = positions[j,1];
y2 = positions[j,2];
d = sqrt((x1 - x2)^2 + (y1-y2)^2)
distancias[i,j] = d;
distancias[j,i] = d
}
}
View(distancias)
View(distancias)
View(distancias)
View(distancias)
distClients = matrix(ncol=nclients, nrow=nclients)
distDeposito = matrix(ncol=nclients, nrow=1)
for(i in c(1:nclients)){
x1 = positions[i,1];
y1 = positions[i,2];
# distancia deposito ao cliente - Vetor
d = sqrt((x1 - 0)^2 + (y1- 0)^2);
distDeposito[i] = d;
# distancia entre cliente - Matriz
for(j in c(1:nclients)){
x2 = positions[j,1];
y2 = positions[j,2];
d = sqrt((x1 - x2)^2 + (y1-y2)^2);
distClients[i,j] = d;
distClients[j,i] = d;
}
}
distDeposito
distClients
aux = c(1,2,3,4,5)
aux = aux < 4
aux
?dif
?diff
aux = c(1,2,3,4,5)
aux = diff(aux, 4)
aux
aux = c(1,2,3,4,5)
aux = diff(aux, <4)
aux
?setfdif
?setfdiff
?setdiff
?filter
?setdiff
aux = setdiff(aux)
aux = setdiff(aux, c(13:20))
aux
aux = c(1:20)
aux = setdiff(aux, c(13:20))
aux
aux.size
?size
?length
length(aux)
setwd("\Users/Miguel/OneDrive - Universidade do Minho/2ยบ Semestre/SI - Computacao Natural/TP4 - SVM & ACO/")
#exemplo sem especifica??o do kernel (assume um por defeito)
runSVM <- function(file_name){
library(e1071)
library(xlsx)
trainingInput <- read.xlsx(file_name, 1, header=T)
ncols.trainingInput <- ncol(trainingInput)
trainingInput <- trainingInput[ , 2 : ncols.trainingInput]
trainingOutput<- read.xlsx(file_name, 2, header=T)
trainingOutput <- matrix(c(trainingOutput[ , 2]), ncol=1)
testData <- read.xlsx(file_name, 3, header=T)
ncols.testData <- ncol(testData)
testData <- testData[, 2 : ncols.testData]
#generate column names for trainingInput and trainingOutput. required for formula construction
colnames(trainingInput) <- inputColNames <- paste0("x", 1:ncol(trainingInput))
colnames(trainingOutput) <- outputColNames <- paste0("y", 1:ncol(trainingOutput))
#Column bind the data into one variable
trainingdata <- cbind(trainingInput,trainingOutput)
# estimate model and predict input values
m <- svm(trainingInput,trainingOutput,kernel = 'sigmoid', epsilon = 1)
pred <- predict(m, testData)
# visualize
#   plot(trainingData, realData)
#   points(trainingData, log(trainingData), col = 2)
#   points(trainingData, pred, col = 4)
#write.xlsx(pred, file=file_name, sheetName="Test Result", col.names=F, row.names=F, append=T)
return (pred)
}
valoresReais<-c(538.006475880555,486.103636638889,498.314949536111,725.948419627777)
valoresPrevistos<-c(runSVM("ex2/HVAC24hS16-11-2016--6.xls"),runSVM("ex2/HVAC24hS16-11-2016--7.xls"),runSVM("ex2/HVAC24hS16-11-2016--8.xls"),runSVM("ex2/HVAC24hS16-11-2016--9.xls"))
mape <-((valoresReais-valoresPrevistos)/valoresReais)
mediaMape <-mean(mape)
valoresReais<-c(538.006475880555,486.103636638889,498.314949536111,725.948419627777)
valoresPrevistos<-c(runSVM("ex2/HVAC24hS16-11-2016--6.xls"),runSVM("ex2/HVAC24hS16-11-2016--7.xls"),runSVM("ex2/HVAC24hS16-11-2016--8.xls"),runSVM("ex2/HVAC24hS16-11-2016--9.xls"))
mape <-((valoresReais-valoresPrevistos)/valoresReais)
mediaMape <-mean(mape)
valoresReais<-c(538.006475880555,486.103636638889,498.314949536111,725.948419627777)
valoresPrevistos<-c(runSVM("ex2/HVAC24hS16-11-2016--6.xls"),runSVM("ex2/HVAC24hS16-11-2016--7.xls"),runSVM("ex2/HVAC24hS16-11-2016--8.xls"),runSVM("ex2/HVAC24hS16-11-2016--9.xls"))
mape <-((valoresReais-valoresPrevistos)/valoresReais)
mediaMape <-mean(mape)
valoresReais<-c(538.006475880555,486.103636638889,498.314949536111,725.948419627777)
valoresPrevistos<-c(runSVM("HVAC24hS16-11-2016--6.xls"),runSVM("HVAC24hS16-11-2016--7.xls"),runSVM("HVAC24hS16-11-2016--8.xls"),runSVM("HVAC24hS16-11-2016--9.xls"))
mape <-((valoresReais-valoresPrevistos)/valoresReais)
mediaMape <-mean(mape)
setwd("\Users/Miguel/OneDrive - Universidade do Minho/2ยบ Semestre/SI - Computacao Natural/TP4 - SVM & ACO/")
setwd("/Users/Miguel/OneDrive - Universidade do Minho/2ยบ Semestre/SI - Computacao Natural/TP4 - SVM & ACO/")
valoresReais<-c(538.006475880555,486.103636638889,498.314949536111,725.948419627777)
valoresPrevistos<-c(runSVM("HVAC24hS16-11-2016--6.xls"),runSVM("HVAC24hS16-11-2016--7.xls"),runSVM("HVAC24hS16-11-2016--8.xls"),runSVM("HVAC24hS16-11-2016--9.xls"))
mape <-((valoresReais-valoresPrevistos)/valoresReais)
mediaMape <-mean(mape)
valoresReais<-c(538.006475880555,486.103636638889,498.314949536111,725.948419627777)
valoresPrevistos<-c(runSVM("HVAC24hS16-11-2016--6.xls"),
runSVM("HVAC24hS16-11-2016--7.xls"),
runSVM("HVAC24hS16-11-2016--8.xls"),
runSVM("HVAC24hS16-11-2016--9.xls"))
mape <-((valoresReais-valoresPrevistos)/valoresReais)
mediaMape <-mean(mape)
valoresReais
valoresPrevistos
mediaMape
valoresReais
valoresPrevistos
mape
mediaMape
valoresReais
valoresPrevistos
mape
mediaMape
valoresReais
valoresPrevistos
mape
mediaMape
valoresReais
valoresPrevistos
mape
mediaMape
setwd("/Users/Miguel/OneDrive - Universidade do Minho/2ยบ Semestre/SI - Computacao Natural/TP4 - SVM & ACO/")
#exemplo sem especifica??o do kernel (assume um por defeito)
runSVM <- function(file_name){
library(e1071)
library(xlsx)
trainingInput <- read.xlsx(file_name, 1, header=T)
ncols.trainingInput <- ncol(trainingInput)
trainingInput <- trainingInput[ , 2 : ncols.trainingInput]
trainingOutput<- read.xlsx(file_name, 2, header=T)
trainingOutput <- matrix(c(trainingOutput[ , 2]), ncol=1)
testData <- read.xlsx(file_name, 3, header=T)
ncols.testData <- ncol(testData)
testData <- testData[, 2 : ncols.testData]
#generate column names for trainingInput and trainingOutput. required for formula construction
colnames(trainingInput) <- inputColNames <- paste0("x", 1:ncol(trainingInput))
colnames(trainingOutput) <- outputColNames <- paste0("y", 1:ncol(trainingOutput))
#Column bind the data into one variable
trainingdata <- cbind(trainingInput,trainingOutput)
# estimate model and predict input values
m <- svm(trainingInput,trainingOutput,kernel = 'sigmoid', epsilon = 1)
pred <- predict(m, testData)
# visualize
#   plot(trainingData, realData)
#   points(trainingData, log(trainingData), col = 2)
#   points(trainingData, pred, col = 4)
#write.xlsx(pred, file=file_name, sheetName="Test Result", col.names=F, row.names=F, append=T)
return (pred)
}
valoresReais<-c(538.006475880555,486.103636638889,498.314949536111,725.948419627777)
valoresPrevistos<-c(runSVM("HVAC24hS16-11-2016--6.xls"),
runSVM("HVAC24hS16-11-2016--7.xls"),
runSVM("HVAC24hS16-11-2016--8.xls"),
runSVM("HVAC24hS16-11-2016--9.xls"))
mape <-((valoresReais-valoresPrevistos)/valoresReais)
mediaMape <-mean(mape)
valoresReais
valoresPrevistos
mape
mediaMape
