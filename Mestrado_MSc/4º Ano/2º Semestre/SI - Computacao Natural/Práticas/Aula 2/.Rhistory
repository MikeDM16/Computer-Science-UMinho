dados <- read.csv(("C:\\Users\\migue\\Desktop\\Livro1NN.csv"), header=TRUE, sep=";", dec=",")
formula = Desnutrido ~ Res_quest_RFH-NPT_pontos + Risco_nutricional_RFH-NPT + Nutritional_high_risk_RFH-NPT +
IMC _1 + IMC_(nos_asciticos_usando_peso_seco)_1 + Interpretacao_IMC_1  + IMC_1(1Baixo_peso_0outras_categorias) +
CMB_1(cm) + Adequacao_1CMB + Estadonutricional_CMB_1_class_Frisancho_1 +
Estado_nutricional_CMB_1_class_Frisancho_1 (1desnutricao_leve_2desnutricao_moderada_3desnutricao_grave_4eutrofia) +
Estado_nutricional_CMB_1_class_Friss_Frisancho_1
dados <- read.csv(("C:\\Users\\migue\\Desktop\\Livro1NN.csv"), header=TRUE, sep=";", dec=",")
formula = Desnutrido ~ Res_quest_RFH-NPT_pontos + Risco_nutricional_RFH-NPT + Nutritional_high_risk_RFH-NPT + IMC_1 + IMC_(nos_asciticos_usando_peso_seco)_1 + Interpretacao_IMC_1  + IMC_1(1Baixo_peso_0outras_categorias) + CMB_1(cm) + Adequacao_1CMB + Estadonutricional_CMB_1_class_Frisancho_1 + Estado_nutricional_CMB_1_class_Frisancho_1(1desnutricao_leve_2desnutricao_moderada_3desnutricao_grave_4eutrofia) + Estado_nutricional_CMB_1_class_Friss_Frisancho_1
dados <- read.csv(("C:\\Users\\migue\\Desktop\\Livro1NN.csv"), header=TRUE, sep=";", dec=",")
formula = Desnutrido ~ Res_quest_RFH-NPT_pontos + Risco_nutricional_RFH-NPT + Nutritional_high_risk_RFH-NPT + IMC_1 + IMC_(nos_asciticos_usando_peso_seco) + Interpretacao_IMC_1  + IMC_1(1Baixo_peso_0outras_categorias) + CMB_1(cm) + Adequacao_1CMB + Estadonutricional_CMB_1_class_Frisancho_1 + Estado_nutricional_CMB_1_class_Frisancho_1 + Estado_nutricional_CMB_1_class_Friss_Frisancho_1
dados <- read.csv(("C:\\Users\\migue\\Desktop\\Livro1NNN.csv"), header=TRUE, sep=";", dec=",")
formula = Desnutrido ~ a +b +c +d +e +f +g +h +i +j +k +l
treino <- dados[1:50, ]
teste <- dados[51:78, ]
source('~/.active-rstudio-document', echo=TRUE)
redeTeste <- neuralnet(formula, treino, hidden(2,4), lifesign = "full", linear.output =  FALSE, threshold = 0.01, stepmax = 1e+06)
library(hydroGOF)
library("neuralnet")
library(leaps)
install.packages("zoo")
library(hydroGOF)
library("neuralnet")
library(leaps)
library(hydroGOF)
library("neuralnet")
library(leaps)
dados <- read.csv(("C:\\Users\\migue\\Desktop\\Livro1NNN.csv"), header=TRUE, sep=";", dec=",")
formula = Desnutrido ~ a +b +c +d +e +f +g +h +i +j +k +l
treino <- dados[1:50, ]
teste <- dados[51:78, ]
redeTeste <- neuralnet(formula, treino, hidden(2,4), lifesign = "full", linear.output =  FALSE, threshold = 0.01, stepmax = 1e+06)
redeTeste <- neuralnet(formula, treino, hidden = c(2,4), lifesign = "full", linear.output =  FALSE, threshold = 0.01, stepmax = 1e+06)
install.packages(igraph)
install.packages("igraph"")
install.packages("igraph")
install.packages("igraph")
library(igraph)
load("c:/Users/migue/OneDrive/Universidade/4º Ano/Mineração de Dados/hits.R")
make_empty_graph(5)
g<-make_empty_graph(5)
plot(g)
add.vertices(g,5,color)
set_edge_attr((g,"color", value="red"))
g<-make_empty_graph(5) %>%
add_edges(1,2, 2,3, 3,4, 4,5) %>%
add_edges(c(5,1), color="green")
g<-make_empty_graph(5) %>%
+ add_edges(c(1,2, 2,3, 3,4, 4,5)) %>%
+ set_edge_attr(color, value = "red") %>%
+ add_edges(c(5,1), color="green")
g<-make_empty_graph(5) %>%
+ add_edges(c(1,2, 2,3, 3,4, 4,5)) %>%
+ set_edge_attr(color, value = "red") %>%
+ add_edges(c(5,1), color="green")
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5)) %>%
set_edge_attr(color, value = "red") %>%
add_edges(c(5,1), color="green")
plot(g)
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5)) %>%
set_edge_attr(color, value = "red") %>%
add_edges(c(5,1), color = "green")
plot(g)
g<-make_empty_graph(5) %>%
+ add_edges(c(1,2, 2,3, 3,4, 4,5)) %>%
+ set_edge_attr("color", value = "red") %>%
+ add_edges(c(5,1), color = "green")
plot(g)
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5)) %>%
set_edge_attr("color", value = "red") %>% add_edges(c(5,1), color = "green")
plot(g)
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5)) %>%
set_edge_attr(color, value = "red") %>%
add_edges(c(5,1), color = "green")
plot(g)
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5)) %>%
set_edge_attr(color, value = "red") %>%
add_edges(c(5,1), color = "green")
plot(g)
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5)) %>%
set_edge_attr(color, value = "red") %>%
add_edges(c(5,1), color = "green")
plot(g)
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5)) %>%
set_edge_attr(color, value = "red") %>%
add_edges(c(5,1), color = "green")
plot(g)
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5)) %>%
set_edge_attr("color", value = "red") %>%
add_edges(c(5,1), color = "green")
plot(g)
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5)) %>%
set_edge_attr("color", value = "red") %>%
add_edges(c(5,1), color = "green")
plot(g)
betweenness(g)
closure(g)
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5, 5,1, 4,2)) %>%
set_edge_attr("color", value = "red") %>%
add_edges(c(4,2), color = "green")
plot(g)
betweenness(g)
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5, 5,1, 4,2)) %>%
set_edge_attr("color", value = "red") %>%
add_edges(c(4,2), color = "green")
plot(g)
betweenness(g)
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5, 5,1)) %>%
set_edge_attr("color", value = "red") %>%
add_edges(c(4,2), color = "green")
g<-make_empty_graph(5) %>%
add_edges(c(1,2, 2,3, 3,4, 4,5, 5,1)) %>%
set_edge_attr("color", value = "red") %>%
add_edges(c(4,2), color = "green")
plot(g)
betweenness(g)
closure(g)
edge_betweenness(g)
closeness(g)
closeness(g)
add_vertices(g, 6)
plot(g)
add.vertices(g, 6)
plot(g)
x = [1:5]
clear
clean
demo()
x <- 5
a <- c(3,4,"a")
class(a)
a[3]
a <- c(3,4,5)
class(a)
b <- c("cat", "dog")
class(b)
a+3
b+3
a*3
b*3
a==4
(a==4)*a
a>4
a[a>4]
a <- c(3,4,5,6,8)
class(a)
b <- c("cat", "dog")
class(b)
a+3
b+3
a*3
b*3
a==4
(a==4)*a
a>4
a[a>4]
a <- c(3,4,5,6,8)
class(a)
b <- c("cat", "dog")
class(b)
a+3
b+3
a*3
b*3
a==4
(a==4)*a
a>4
a[a>4]
l <- length(a)
l <- length(a)
l
?c
length(a)
sum(a)
mean(a)
var(a)
?Var
?var
?seq
seq(from=1, to=5)
seq(5)
1:5
seq(1,5,by=2)
seq(1,5, length.out=9)
seq(1,5)
?rep
rep(1, times=2)
rep(1:4, times=2)
rep(1:4, each=2)
rep(1:4, times=2, each=2)
rep(1:4, 1:4)
?matrix()
?matrix
matrix(x,3,5)
matrix(1:3,3,5)
matrix(0,3,5)
matrix(1:3,3,5)
m <- matrix(1:5,5,5)
m[,1]
m <- matrix(1:5,5,5)
m
m[,1]
m[4,] # linha
m*2
?data.frame
as.data.frame(m)
data()
a <- c(3,4,5)
b <- c("cat", "dog")
A <- matrix(0,3,2)
B <- matrix(0,2,3)
?list
m_list <- list(a=a, b=b, A=A, B=B)
m_list <- list(a, b, A, B)
my_list
m_list
m_list <- list(a=a, b=b, A=A, B=B)
m_list
summary(chickwts)
plot(chickwts)
plot(chickwts$feed, chickwts$weight)
install.packages("neuralnet")
neuralnet
install.packages("neuralnet")
install.packages("neuralnet")
neuralnet
install.packages("neuralnet")
install.packages("neuralnet")
neuralnet
install.packages("neuralnet")
install.packages("neuralnet")
neuralnet
library("neuralnet", lib.loc="~/R/win-library/3.4")
neuralnet()
neuralnet
?neuralnet
infert
summary(infert)
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=2, err.fct="ce", linear.output=FALSE)
view(nn)
View(nn)
install.packages("View")
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=5, err.fct="ce", linear.output=FALSE)
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=5, err.fct="ce", linear.output=TRUE)
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=5, err.fct="ce", linear.output=FALSE)
library(neuralnet)
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=2, err.fct="ce", linear.output=FALSE)
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=c(2), err.fct="ce", linear.output=FALSE)
View(nn)
view(nn)
view(data.frame(nn))
View(data.frame(nn))
plot(nn)
library(neuralnet)
# ANN com duas camadas intermédias + dataset infert
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=2, err.fct="ce", linear.output=FALSE)
plot(nn)
library(neuralnet)
# ANN com duas camadas intermédias + dataset infert
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=3, err.fct="ce", linear.output=FALSE)
plot(nn)
library(neuralnet)
# ANN com duas camadas intermédias + dataset infert
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=c(3,2,4), err.fct="ce", linear.output=FALSE)
plot(nn)
library(neuralnet)
# ANN com duas camadas intermédias + dataset infert
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=c(3,2), err.fct="ce", linear.output=FALSE)
plot(nn)
library(neuralnet)
# ANN com duas camadas intermédias + dataset infert
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=c(3,2), err.fct="ce", linear.output=FALSE, stepmax=100000)
plot(nn)
library(neuralnet)
# ANN com duas camadas intermédias + dataset infert
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=c(3,2), err.fct="ce", linear.output=FALSE, stepmax=10e10)
plot(nn)
library(neuralnet)
# ANN com duas camadas intermédias + dataset infert
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=c(3,2), err.fct="ce", linear.output=FALSE, stepmax=10^10)
plot(nn)
library(neuralnet)
# ANN com duas camadas intermédias + dataset infert
nn <- neuralnet(case~age+parity+induced+spontaneous, data=infert, hidden=c(3,2), err.fct="ce", linear.output=FALSE, stepmax=10000000)
<
install.packages("neuralnet")
install.packages("neuralnet")
install.packages("neuralnet")
install.packages("neuralnet")
library(neuralnet)
library(caTools)
# Set directory
setwd("../OneDrive - Universidade do Minho/2º Semestre/SI - Computacao Natural/Aula 2/")
# read the file, header TRUE (or just T), seperator is the space and the decimal case mark
# whit
data <- read.delim("cereals.csv", header=TRUE, sep=",")
# Min and max array to normalize data columns
max = apply(data, 2, max)
min = apply(data, 2, min)
data <- as.data.frame(scale(data, center=min, scale = max-min))
# set seed for pseudo random
set.seed(80)
# split data, 70% for train and 30% for teste
split <- sample.split(data$calories, SplitRatio = 0.6)
split # uses the seed
# define the train and teste dataset, by the split value.
train <- subset(data, split==TRUE) # if split is TRUE
teste <- subset(data, split==FALSE)
train
feats = names(data) # nomes dos atributos
f <- paste(feats[1:5], collapse = '+') # string com nomes atributos separados por +
f <- paste(feats[6], '~', f) # formula na forma de string:  Classe_output ~ atributos_input
f <- as.formula(f) # converter de string para formula
# Creater a neural net, whit 3 hidden layers
nn <- neuralnet(f, train, hidden = 3, linear.output = T)
plot(nn)
# testar a previsão da rede, com todas as as linhas e as 4 primeuras colunas
predicted.nn.values <- compute(nn, teste[1:5] )
predicted.nn.values <- as.data.frame(sapply(predicted.nn.values$net.result, round, digits=0))
# minimum square error
MSE.NN <- sum(teste$Avaliacao - predicted.nn.values$net.result)^2 / nrow(teste)
# minimum square error
MSE.NN <- sum(teste$Avaliacao - predicted.nn.values$net.result)^2 / nrow(teste)
MSE.NN
View(predicted.nn.values)
View(predicted.nn.values)
?type
typeof(predicted.nn.values)
c <- c(1,2,3)
c
typeof(c)
typeof(c[1])
predicted.nn.values <- compute(nn, teste[1:5] )
predicted.nn.values <- as.data.frame(sapply(predicted.nn.values$net.result, round, digits=2))
# minimum square error
MSE.NN <- sum(teste$Avaliacao - predicted.nn.values$net.result)^2 / nrow(teste)
MSE.NN
rmse(c(teste$Avaliacao), c(predicted.nn.values$net.result))
?rmse
RMSE(c(teste$Avaliacao), c(predicted.nn.values$net.result))
resultados <- data.frame(atual = teste$Avaliacao, previsao = predicted.nn.values$net.result)
install.packages("rmse")
r <- rmse(c(teste$Avaliacao), c(predicted.nn.values$net.result))
plot(nn)
plot(nn)
install.packages("NeuralNetTools")
library(neuralnettools)
library(NeuralNetTools)
plotnet(nn)
?plot
?plotnn
?plotnet
no <- neuralnet(f, train, hidden = 3, linear.output = T)
plotnet(no)
plot(no)
plot(no)
table(teste, prediction.nn.values)
table(teste, predicted.nn.values)
?table
is.table(teste)
is.table(as.table(teste))
is.table(as.table(teste))
tauz <- as.table(teste)
teste
tauz <- as.table(teste[2,;2,])
tauz <- as.table(teste[2;2])
tauz <- as.table(teste[2,2])
tauz
tauz <- as.table(teste[2:,2:])
typeof(teste)
df <- as.data.frame(teste)
df
typeof(df)
table(as.data.frame(teste), as.data.frame(predicted.nn.values))
rmse <- sqrt(mean((teste$Avaliacao - predicted.nn.values$net.result)^2))
rmse
